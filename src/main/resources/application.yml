server:
  port: 8081

spring:
  datasource:
    type: com.alibaba.druid.pool.DruidDataSource
    driver-class-name: com.mysql.jdbc.Driver
    url: jdbc:mysql://ip:3306/java?useUnicode=true&characterEncoding=UTF-8
    username: username
    password: password
    initialSize: 5    # 下面为连接池的补充设置，应用到上面所有数据源中
    minIdle: 5        # 初始化大小，最小，最大
    maxActive: 20
    maxWait: 60000     # 配置获取连接等待超时的时间
    timeBetweenEvictionRunsMillis: 60000    # 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒
    validationQuery: SELECT 1 FROM DUAL  # 配置一个连接在池中最小生存的时间，单位是毫秒
    testWhileIdle: true
    testOnBorrow: false
    testOnReturn: false
    poolPreparedStatements: true  # 打开PSCache，并且指定每个连接上PSCache的大小
    maxPoolPreparedStatementPerConnectionSiz: 20
    filters: stat,wall,log4j    # 配置监控统计拦截的filters，去掉后监控界面sql无法统计，'wall'用于防火墙
    connectionProperties: druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000
    # 通过connectProperties属性来打开mergeSql功能；慢SQL记录
    #useGlobalDataSourceStat: true # 合并多个DruidDataSource的监控数据

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true

#  rabbitmq:
#    host: 127.0.0.1
#    port: 5672
#    username: username
#    password: password

#  redis:
#    database: 0 # Redis数据库索引（默认为0）
#    host: localhost # Redis服务器地址
#    port: 6379 # Redis服务器连接端口
#    password: # Redis服务器连接密码（默认为空）
#    pool:
#      max-active: 8 # 连接池最大连接数（使用负值表示没有限制）
#      max-wait: -1 # 连接池最大阻塞等待时间（使用负值表示没有限制）
#      max-idle: 8 # 连接池中的最大空闲连接
#      min-idle: 0 # 连接池中的最小空闲连接
#    timeout: 0 # 连接超时时间（毫秒）
